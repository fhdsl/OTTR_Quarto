# Candace Savonen Dec 2021
# Updated April 2023
name: Pull Request

on:
  pull_request:
    branches: [ main, staging ]

jobs:

  yaml-check:
    name: Load user automation choices
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

        # Use the yaml-env-action action.
      - name: Load environment from YAML
        uses: doughepi/yaml-env-action@v1.0.0
        with:
            files: config_automation.yml # Pass a space-separated list of configuration files. Rightmost files take precedence.

      # Delete the branch if this has been run before
      - name: Delete branch locally and remotely
        run: git push origin --delete preview-${{ github.event.pull_request.number }} || echo "No branch to delete"

      # Make the branch fresh
      - name: Make the branch fresh
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          branch_name='preview-${{ github.event.pull_request.number }}'
          echo branch doesnt exist
          git checkout -b $branch_name || echo branch exists
          git push --set-upstream origin $branch_name
        shell: bash

    outputs:
      public_repository: "${{ steps.public_repository.outputs.public }}"
      toggle_spell_check: "${{ env.SPELL_CHECK }}"
      toggle_url_check: "${{ env.URL_CHECKER }}"
      toggle_render_preview: "${{ env.RENDER_PREVIEW }}"
      rendering_docker_image: "${{ env.RENDERING_DOCKER_IMAGE }}"

########################## Make the error reports ##############################
  spell-check:
    name: Check spelling
    needs: yaml-check
    if: ${{needs.yaml-check.outputs.toggle_spell_check == 'yes'}}
    uses: jhudsl/ottr-reports/.github/workflows/report-maker.yml@main
    with:
      check_type: spelling
      error_min: 3
      gh_pat: secrets.GH_PAT

  url-check:
    name: Check URLs
    needs: yaml-check
    if: ${{needs.yaml-check.outputs.toggle_url_check == 'yes'}}
    uses: jhudsl/ottr-reports/.github/workflows/report-maker.yml@main
    with:
      check_type: urls
      error_min: 0
      gh_pat: secrets.GH_PAT

  render-preview:
    name: Render preview
    needs: yaml-check
    runs-on: ubuntu-latest
    container:
      image: ${{needs.yaml-check.outputs.rendering_docker_image}}
    if: ${{needs.yaml-check.outputs.toggle_render_preview == 'yes'}}

    steps:
      - name: Checkout files
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set up git checkout
      - name: Set up git checkout
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          branch_name='preview-${{ github.event.pull_request.number }}'
          git fetch --all
          git checkout $branch_name
          git merge -s recursive --strategy-option=theirs origin/${{ github.head_ref }} --allow-unrelated-histories
        shell: bash

       # Now we want to render all the html files from the qmd files
      - name: Run render html
        id: site
        run: quarto render 

      # This checks on the steps before it and makes sure that they completed.
      # If the renders didn't complete we don't want to commit the file changes
      - name: Check on render steps
        if: steps.site.outcome != 'success'
        run: |
          echo site status ${{steps.site.outcome}}
          exit 1

      - name: Website preview for download
        run: zip website-preview.zip docs/* -r

      # Commit the rendered website files
      - name: Commit rendered website files to preview branch
        id: commit
        run: |
          branch_name='preview-${{ github.event.pull_request.number }}'
          git diff origin/main -- '*.html' >/dev/null && changes=true || changes=false
          echo "changes=$changes" >> $GITHUB_OUTPUT
          git add . --force
          git commit -m 'Render preview' || echo "No changes to commit"
          git pull --set-upstream origin $branch_name --allow-unrelated-histories --strategy-option=ours
          git push --force || echo "No changes to commit"
        shell: bash

      - name: Find Comment
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: latest commit

      - name: Build components of the comment
        id: build-components
        run: |
          course_name=$(head -n 1 _website.yml | cut -d'"' -f 2| tr " " "-")
          website_link=$(echo "https://htmlpreview.github.io/?https://raw.githubusercontent.com/$GITHUB_REPOSITORY/preview-${{ github.event.pull_request.number }}/docs/index.html")
          docs_link=$(echo "https://github.com/$GITHUB_REPOSITORY/raw/preview-${{ github.event.pull_request.number }}/website-preview.zip")
          echo "docs_link=$docs_link" >> $GITHUB_OUTPUT
          echo "website_link=$website_link" >> $GITHUB_OUTPUT
          echo "time=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "commit_id=$GITHUB_SHA" >> $GITHUB_OUTPUT
          echo ${{steps.commit.outputs.changes}}

      - name: Create or update comment
        if: steps.commit.outputs.changes == 'true'
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            :eyes: Quick [preview of website here](${{ steps.build-components.outputs.website_link }}) \*
            :microscope: Comprehensive [download of the website here](${{ steps.build-components.outputs.docs_link }})
            
            \* note not all html features will be properly displayed in the "quick preview" but it will give you a rough idea.
            
            _Updated at ${{ steps.build-components.outputs.time }} with changes from the latest commit ${{ steps.build-components.outputs.commit_id }}_
          edit-mode: replace

      - name: No comment if no changes
        if: steps.commit.outputs.changes == 'false'
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            The latest commit did not produce rendering changes.

            _Updated at ${{ steps.build-components.outputs.time }} with changes from ${{ steps.build-components.outputs.commit_id }}_
          edit-mode: replace
